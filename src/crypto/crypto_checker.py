import asyncio
from typing import List, Callable, Optional

from src.crypto.exchange import Exchange
from src.utils.redis_manager import RedisChatManager, RedisCacheManager

from src.utils.logging_config import logger
from src.config import CRYPTO_CHECK_INTERVAL, PRICE_CHANGE_THRESHOLD


class CryptoPriceMonitor:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –±–∏—Ä–∂–∞—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""

    def __init__(self, exchanges: List[Exchange], username: str, send_notification: Callable):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ CryptoPriceMonitor.
        
        :param exchanges: –°–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –±–∏—Ä–∂ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
        :param username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∞–∫—Ç–∏–≤–∏—Ä—É—é—â–µ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥.
        :param send_notification: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ —Ä–æ—É—Ç–µ—Ä—ã.
        """
        self.exchanges = exchanges
        self.username = username
        self.send_notification = send_notification
        self.is_monitoring_active = False
        
        self.check_interval = CRYPTO_CHECK_INTERVAL
        self.price_change_threshold = PRICE_CHANGE_THRESHOLD

        self.chat_manager = RedisChatManager()
        self.cache_manager = RedisCacheManager()

    async def monitor_price_changes(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        self.is_monitoring_active = True
        
        chat_id = self.chat_manager.get_chat_id(self.username)
        if not chat_id:
            logger.warning(f"–ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.username}")
            return

        while self.is_monitoring_active:
            for exchange in self.exchanges:
                logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –±–∏—Ä–∂–µ {exchange.__class__.__name__}...")

                # –ü–æ–ª—É—á–∞–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                cache_key = exchange.__class__.__name__
                cached_data = self.cache_manager.get_data(cache_key)

                # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏, –µ—Å–ª–∏ –∫—ç—à–∞ –Ω–µ—Ç –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª
                if not cached_data:
                    data = await asyncio.get_running_loop().run_in_executor(None, exchange.fetch_market_data)
                    self.cache_manager.save_data(cache_key, data, ttl=300)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å TTL 5 –º–∏–Ω—É—Ç
                else:
                    data = cached_data

                significant_changes = await asyncio.get_running_loop().run_in_executor(
                    None,
                    exchange.filter_significant_changes,
                    data,
                    self.price_change_threshold
                )

                if significant_changes:
                    for coin in significant_changes:
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –º–æ–Ω–µ—Ç–µ {coin['symbol']} —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º {coin['price_change']:.2f}%")
                        await self.notify_user(chat_id, coin['symbol'], coin['price_change'], coin['last_price'])
                else:
                    logger.info("–°—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
                    await self.notify_user(chat_id, has_changes=False)

            await asyncio.sleep(self.check_interval)

    async def notify_user(self, chat_id: int, symbol: Optional[str] = None, price_change: Optional[float] = None,
                          last_price: Optional[float] = None, has_changes: bool = True):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω –∏–ª–∏ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π."""
        if not chat_id:
            logger.warning("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: chat_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            return

        await self.send_notification(chat_id, symbol, price_change, last_price, has_changes)


class CryptoBotController(CryptoPriceMonitor):
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞."""

    def __init__(self, exchanges: List[Exchange], username: str, send_notification: Callable):
        super().__init__(exchanges, username, send_notification)
        self.monitoring_task = None

    def update_user(self, username: str):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ username."""
        self.username = username
    
    async def start_monitoring(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω."""
        if not self.monitoring_task or self.monitoring_task.done():
            logger.info(f"–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.username}.")
            self.monitoring_task = asyncio.create_task(self.monitor_price_changes())
        else:
            logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")

    async def stop_monitoring(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω."""
        if self.monitoring_task and not self.monitoring_task.done():
            logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.username}.")
            self.monitoring_task.cancel()
            self.is_monitoring_active = False
            await self.monitoring_task
        else:
            logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    async def update_config(self, check_interval: int, price_change_threshold: float):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        self.check_interval = check_interval
        self.price_change_threshold = price_change_threshold
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ = {self.check_interval} —Å–µ–∫, "
                    f"–ø–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã = {self.price_change_threshold}%")
        
    async def get_status(self, chat_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        status_message = (
            f"üìä <b>–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n"
            f"–ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if self.is_monitoring_active else '–ù–µ—Ç'}\n"
            f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.check_interval} —Å–µ–∫\n"
            f"–ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã: {self.price_change_threshold}%"
        )
        await self.send_notification(chat_id, status_message=status_message)

    async def get_coin_info(self, chat_id: int, coin_name: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ, –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –±–∏—Ä–∂–µ."""
        for exchange in self.exchanges:
            data = await asyncio.get_running_loop().run_in_executor(None, exchange.fetch_market_data)            
            coin_info = next((coin for coin in data if coin['symbol'].lower() == coin_name.lower()), None)
            
            if coin_info:
                info_message = (
                    f"üí∞ <b>{coin_info['symbol']}</b>\n"
                    f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {coin_info['last_price']}\n"
                    f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: {coin_info['price_change']}%"
                )
                await self.send_notification(chat_id, status_message=info_message)
                return

        await self.send_notification(chat_id, status_message=f"‚ùó –ú–æ–Ω–µ—Ç–∞ {coin_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")