import asyncio
from typing import List, Callable, Optional

from src.crypto.exchange import Exchange
from src.utils.redis_manager import RedisChatManager, RedisCacheManager

from src.utils.logging_config import logger
from src.config import CRYPTO_CHECK_INTERVAL, PRICE_CHANGE_THRESHOLD


class CryptoPriceMonitor:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –±–∏—Ä–∂–∞—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    
    def __init__(self, exchanges: List[Exchange], send_notification: Callable):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω.
        
        :param exchanges: –°–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –±–∏—Ä–∂ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.
        :param send_notification: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        """
        self.exchanges = exchanges
        self.user_id = None
        self.chat_id = None
        self.username = None
        self.send_notification = send_notification
        self.is_monitoring_active = False
        
        self.check_interval = CRYPTO_CHECK_INTERVAL
        self.price_change_threshold = PRICE_CHANGE_THRESHOLD

        self.chat_manager = RedisChatManager()
        self.cache_manager = RedisCacheManager()

    def initialize_user(self, user_id: int, chat_id: int, username: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Redis."""
        self.user_id = user_id
        self.chat_id = chat_id
        self.username = username
        self.chat_manager.add_user(user_id, chat_id, username)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: user_id={user_id}, chat_id={chat_id}, username={username}")

    def update_user_if_needed(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Redis –ø—Ä–∏ –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–∏."""
        stored_data = self.chat_manager.get_user_data(self.user_id)
        if stored_data:
            if stored_data.get('chat_id') != self.chat_id or stored_data.get('username') != self.username:
                self.chat_manager.add_user(self.user_id, self.chat_id, self.username)
                logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã: user_id={self.user_id}")
        else:
            logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è user_id={self.user_id}, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ /start")

    def reset_user_data(self):
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏."""
        self.user_id = None
        self.chat_id = None
        self.username = None
        logger.info("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–±—Ä–æ—à–µ–Ω—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è.")

    async def monitor_price_changes(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        self.is_monitoring_active = True

        if not self.chat_id:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω chat_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.user_id}")
            return

        while self.is_monitoring_active:
            for exchange in self.exchanges:
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂–∏ {exchange.__class__.__name__}...")

                cache_key = exchange.__class__.__name__
                cached_data = self.cache_manager.get_data(cache_key)

                if not cached_data:
                    data = await asyncio.get_running_loop().run_in_executor(None, exchange.fetch_market_data)
                    self.cache_manager.save_data(cache_key, data, ttl=300)
                else:
                    data = cached_data

                significant_changes = await asyncio.get_running_loop().run_in_executor(
                    None,
                    exchange.filter_significant_changes,
                    data,
                    self.price_change_threshold
                )

                if significant_changes:
                    for coin in significant_changes:
                        await self.notify_user(self.chat_id, symbol=coin['symbol'], price_change=coin['price_change'], last_price=coin['last_price'])
                else:
                    await self.notify_user(self.chat_id, has_changes=False)

            await asyncio.sleep(self.check_interval)

    async def notify_user(self, chat_id: int, symbol: Optional[str] = None, price_change: Optional[float] = None,
                          last_price: Optional[float] = None, has_changes: bool = True):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ü–µ–Ω –∏–ª–∏ –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏."""
        if not chat_id:
            logger.warning("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç chat_id.")
            return

        await self.send_notification(chat_id, symbol=symbol, price_change=price_change, last_price=last_price, has_changes=has_changes)


class CryptoBotController(CryptoPriceMonitor):
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –∏ –µ–≥–æ –∫–æ–º–∞–Ω–¥–∞–º–∏, –≤–∫–ª—é—á–∞—è –∫–æ–Ω—Ç—Ä–æ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω."""
    
    def __init__(self, exchanges: List[Exchange], send_notification: Callable):
        super().__init__(exchanges, send_notification)
        self.monitoring_task = None

    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ."""
        self.update_user_if_needed()
        if not self.monitoring_task or self.monitoring_task.done():
            logger.info(f"–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.user_id}")
            self.monitoring_task = asyncio.create_task(self.monitor_price_changes())
        else:
            logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")

    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ."""
        self.update_user_if_needed()
        if self.monitoring_task and not self.monitoring_task.done():
            logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.user_id}")
            self.monitoring_task.cancel()
            self.is_monitoring_active = False
            await self.monitoring_task
        else:
            logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    async def update_config(self, check_interval: int, price_change_threshold: float):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        self.update_user_if_needed()
        self.check_interval = check_interval
        self.price_change_threshold = price_change_threshold
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: –∏–Ω—Ç–µ—Ä–≤–∞–ª = {self.check_interval} —Å–µ–∫, –ø–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã = {self.price_change_threshold}%")

    async def get_status(self, chat_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        self.update_user_if_needed()
        status_message = (
            f"üìä <b>–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n"
            f"–ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if self.is_monitoring_active else '–ù–µ—Ç'}\n"
            f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.check_interval} —Å–µ–∫\n"
            f"–ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã: {self.price_change_threshold}%"
        )
        await self.send_notification(chat_id, status_message=status_message)

    async def get_coin_info(self, chat_id: int, coin_name: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ –∏ –∞–∫—Ç—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        self.update_user_if_needed()
        for exchange in self.exchanges:
            data = await asyncio.get_running_loop().run_in_executor(None, exchange.fetch_market_data)
            coin_info = next((coin for coin in data if coin['symbol'].lower() == coin_name.lower()), None)

            if coin_info:
                info_message = (
                    f"üí∞ <b>{coin_info['symbol']}</b>\n"
                    f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {coin_info['last_price']}\n"
                    f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: {coin_info['price_change']}%"
                )
                await self.send_notification(chat_id, status_message=info_message)
                return

        await self.send_notification(chat_id, status_message=f"‚ùó –ú–æ–Ω–µ—Ç–∞ {coin_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")