import asyncio
from typing import List, Set, Callable
from src.crypto.exchange import Exchange

from src.utils.logging_config import logger
from src.config import CRYPTO_CHECK_INTERVAL, PRICE_CHANGE_THRESHOLD

class CryptoPriceMonitor:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –±–∏—Ä–∂–∞—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π."""

    def __init__(self, exchanges: List[Exchange], active_chats: Set[int], send_notification: Callable):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ CryptoPriceMonitor.

        :param exchanges: –°–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –±–∏—Ä–∂ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞.
        :param active_chats: –ù–∞–±–æ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤, –∫—É–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
        :param send_notification: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ —Ä–æ—É—Ç–µ—Ä—ã.
        """
        self.exchanges = exchanges
        self.active_chats = active_chats
        self.check_interval = CRYPTO_CHECK_INTERVAL
        self.price_change_threshold = PRICE_CHANGE_THRESHOLD
        self.is_monitoring_active = False
        self.send_notification = send_notification

    async def monitor_price_changes(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω."""
        self.is_monitoring_active = True
        while self.is_monitoring_active:
            for exchange in self.exchanges:
                logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –±–∏—Ä–∂–µ {exchange.__class__.__name__}...")
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å –±–∏—Ä–∂–∏
                data = await asyncio.get_running_loop().run_in_executor(None, exchange.fetch_market_data)
                
                # –§–∏–ª—å—Ç—Ä—É–µ–º –¥–ª—è –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
                significant_changes = await asyncio.get_running_loop().run_in_executor(
                    None,
                    exchange.filter_significant_changes,
                    data,
                    self.price_change_threshold
                )

                if significant_changes:
                    for coin in significant_changes:
                        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ –º–æ–Ω–µ—Ç–µ {coin['symbol']} —Å –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º {coin['price_change']:.2f}%")
                        await self.notify_users(coin['symbol'], coin['price_change'], coin['last_price'])
                else:
                    logger.info("–°—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ.")
                    await self.notify_users(has_changes=False)
                    
            await asyncio.sleep(self.check_interval)

    async def notify_users(self, symbol: str = None, price_change: float = None, last_price: float = None, has_changes: bool = True):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã –æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ü–µ–Ω –∏–ª–∏ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π."""
        if not self.active_chats:
            logger.warning("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.")
            return

        for chat_id in self.active_chats:
            await self.send_notification(chat_id, symbol, price_change, last_price, has_changes)

class CryptoBotController(CryptoPriceMonitor):
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞."""

    def __init__(self, exchanges: List[Exchange], active_chats: Set[int], send_notification: Callable):
        super().__init__(exchanges, active_chats, send_notification)
        self.monitoring_task = None

    async def start_monitoring(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω."""
        if not self.monitoring_task or self.monitoring_task.done():
            logger.info("–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.")
            self.monitoring_task = asyncio.create_task(self.monitor_price_changes())
        else:
            logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω.")

    async def stop_monitoring(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω."""
        if self.monitoring_task and not self.monitoring_task.done():
            logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.")
            self.monitoring_task.cancel()
            self.is_monitoring_active = False
            await self.monitoring_task
        else:
            logger.info("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

    async def update_config(self, check_interval: int, price_change_threshold: float):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        self.check_interval = check_interval
        self.price_change_threshold = price_change_threshold
        logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ = {self.check_interval} —Å–µ–∫, "
                    f"–ø–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã = {self.price_change_threshold}%")
        
    async def get_status(self, chat_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        status_message = (
            f"üìä <b>–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n"
            f"–ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if self.is_monitoring_active else '–ù–µ—Ç'}\n"
            f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.check_interval} —Å–µ–∫\n"
            f"–ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã: {self.price_change_threshold}%"
        )
        await self.send_notification(chat_id, status_message=status_message)

    async def get_coin_info(self, chat_id: int, coin_name: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–µ, –µ—Å–ª–∏ –æ–Ω–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ –Ω–∞ –±–∏—Ä–∂–µ."""
        for exchange in self.exchanges:
            data = await asyncio.get_running_loop().run_in_executor(None, exchange.fetch_market_data)            
            coin_info = next((coin for coin in data if coin['symbol'].lower() == coin_name.lower()), None)
            
            if coin_info:
                info_message = (
                    f"üí∞ <b>{coin_info['symbol']}</b>\n"
                    f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {coin_info['last_price']}\n"
                    f"–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24—á: {coin_info['price_change']}%"
                )
                await self.send_notification(chat_id, status_message=info_message)
                return

        await self.send_notification(chat_id, status_message=f"‚ùó –ú–æ–Ω–µ—Ç–∞ {coin_name} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")