import asyncio

from aiogram import Bot
from typing import List

from src.crypto.exchange import Exchange
from src.utils.redis_manager import RedisChatManager, RedisCacheManager

from src.utils.logging_config import logger
from src.config import CRYPTO_CHECK_INTERVAL, PRICE_CHANGE_THRESHOLD


class CryptoPriceMonitor:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –Ω–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –±–∏—Ä–∂–∞—Ö –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    
    def __init__(self, exchanges: List[Exchange], bot: Bot):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω.
        
        :param exchanges: –°–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã—Ö –±–∏—Ä–∂ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è.
        :param bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞.
        """
        self.exchanges = exchanges
        self.bot = bot
        self.user_id = None
        self.chat_id = None
        self.username = None
        self.is_monitoring_active = False
        
        self.check_interval = CRYPTO_CHECK_INTERVAL
        self.price_change_threshold = PRICE_CHANGE_THRESHOLD

        self.chat_manager = RedisChatManager()
        self.cache_manager = RedisCacheManager()

    def initialize_user(self, user_id: int, chat_id: int, username: str):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Redis."""
        self.user_id = user_id
        self.chat_id = chat_id
        self.username = username
        self.chat_manager.add_user(user_id, chat_id, username)
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: user_id={user_id}, chat_id={chat_id}, username={username}")

    def update_user_if_needed(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Redis –ø—Ä–∏ –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–∏."""
        stored_data = self.chat_manager.get_user_data(self.user_id)
        if stored_data:
            if stored_data.get('chat_id') != self.chat_id or stored_data.get('username') != self.username:
                self.chat_manager.add_user(self.user_id, self.chat_id, self.username)
                logger.info(f"–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã: user_id={self.user_id}")
        else:
            logger.warning(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è user_id={self.user_id}, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–µ—Ä–µ–∑ /start")

    async def monitor_price_changes(self):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
        self.is_monitoring_active = True

        if not self.chat_id:
            logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω chat_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.user_id}")
            return

        while self.is_monitoring_active:
            for exchange in self.exchanges:
                logger.info(f"–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –±–∏—Ä–∂–∏ {exchange.get_exchange_name()}...")

                cache_key = exchange.get_exchange_name()
                cached_data = self.cache_manager.get_data(cache_key)

                if not cached_data:
                    data = await asyncio.get_running_loop().run_in_executor(None, exchange.fetch_market_data)
                    self.cache_manager.save_data(cache_key, data, ttl=300)
                else:
                    data = cached_data

                significant_changes = await asyncio.get_running_loop().run_in_executor(
                    None,
                    exchange.filter_significant_changes,
                    data,
                    self.price_change_threshold
                )

                exchange_name = exchange.get_exchange_name()
                if significant_changes:
                    for coin in significant_changes:
                        await self.send_notification(
                            symbol=coin['symbol'],
                            price_change=coin['price_change'],
                            last_price=coin['last_price'],
                            exchange_name=exchange_name
                        )
                else:
                    await self.send_notification(exchange_name=exchange_name, has_changes=False)

            await asyncio.sleep(self.check_interval)

    async def send_notification(self, symbol: str = None, price_change: float = None,
                                last_price: float = None, has_changes: bool = True,
                                exchange_name: str = ""):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö —Ü–µ–Ω –∏–ª–∏ –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏."""
        if not self.chat_id:
            logger.warning("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç chat_id.")
            return

        if has_changes:
            message = (f"üö® –ù–∞ –±–∏—Ä–∂–µ <b>{exchange_name}</b> –º–æ–Ω–µ—Ç–∞ <b>{symbol}</b> –∏–∑–º–µ–Ω–∏–ª–∞—Å—å –Ω–∞ "
                       f"{price_change:.2f}%! –¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: {last_price:.2f}")
        else:
            message = f"–ù–∞ –±–∏—Ä–∂–µ <b>{exchange_name}</b> —Å—É—â–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ —Ü–µ–Ω–∞—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ."

        await self.bot.send_message(chat_id=self.chat_id, text=message)


class CryptoBotController(CryptoPriceMonitor):
    """–ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º –∏ –µ–≥–æ –∫–æ–º–∞–Ω–¥–∞–º–∏, –≤–∫–ª—é—á–∞—è –∫–æ–Ω—Ç—Ä–æ–ª—å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ü–µ–Ω."""
    
    def __init__(self, exchanges: List[Exchange], bot: Bot):
        super().__init__(exchanges, bot)
        self.monitoring_task = None

    async def start_monitoring(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ."""
        self.update_user_if_needed()

        if self.is_monitoring_active and self.monitoring_task and not self.monitoring_task.done():
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.user_id}")
            message = "‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –∑–∞–ø—É—Å–∫–∞—Ç—å –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ."
        else:
            logger.info(f"–ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.user_id}")
            self.monitoring_task = asyncio.create_task(self.monitor_price_changes())
            self.is_monitoring_active = True
            message = "‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!"

        self.chat_manager.set_monitoring_status(self.user_id, True)
        return message

    async def stop_monitoring(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∏–∑–º–µ–Ω–µ–Ω–∏–π —Ü–µ–Ω –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ."""
        self.update_user_if_needed()

        if not self.is_monitoring_active or not self.monitoring_task or self.monitoring_task.done():
            logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.user_id}")
            message = "‚ö†Ô∏è –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ù–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ."
        else:
            logger.info(f"–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.user_id}")
            self.monitoring_task.cancel()
            self.is_monitoring_active = False

            try:
                await self.monitoring_task
            except asyncio.CancelledError:
                logger.info("–ó–∞–¥–∞—á–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            
            message = "üõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
        
        self.chat_manager.set_monitoring_status(self.user_id, False)
        return message

    async def update_config(self, check_interval: int, price_change_threshold: float):
        """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        self.update_user_if_needed()
        self.check_interval = check_interval
        self.price_change_threshold = price_change_threshold
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: –∏–Ω—Ç–µ—Ä–≤–∞–ª = {self.check_interval} —Å–µ–∫, –ø–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã = {self.price_change_threshold}%")

    async def get_status(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        self.update_user_if_needed()
        if not self.chat_id:
            logger.warning(f"–ù–µ –∑–∞–¥–∞–Ω chat_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.user_id}.")
            return

        status_message = (
            f"üìä <b>–°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</b>\n"
            f"–ê–∫—Ç–∏–≤–µ–Ω: {'–î–∞' if self.is_monitoring_active else '–ù–µ—Ç'}\n"
            f"–ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {self.check_interval} —Å–µ–∫\n"
            f"–ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã: {self.price_change_threshold}%"
        )
        await self.bot.send_message(chat_id=self.chat_id, text=status_message)

    async def restart_active_sessions(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Redis –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞."""
        all_users = self.chat_manager.get_all_chats()
        
        for user_id, user_data in all_users.items():
            self.user_id = user_id
            self.chat_id = int(user_data['chat_id'])
            self.username = user_data['username']
            self.is_monitoring_active = user_data['is_monitoring_active']

            self.is_monitoring_active = bool(int(user_data.get('is_monitoring_active', '0')))
            
            logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={user_id}, chat_id={self.chat_id}, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∞–∫—Ç–∏–≤–µ–Ω={self.is_monitoring_active}")

            if self.is_monitoring_active:
                try:
                    logger.info(f"–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: user_id={user_id}, chat_id={self.chat_id}")
                    await self.start_monitoring()
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")